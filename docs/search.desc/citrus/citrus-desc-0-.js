searchState.loadedDescShard("citrus", 0, "This is the documentation for the <code>citrus</code>.\nDefault functions for <code>citrus</code> interface\nTemporary module to define user-facing functions which …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThis deals with four user-settable fields of <code>Parameters</code> …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe <code>Image</code> struct represents the configuration for an image …\nA container for all the images in the configuration file\nThis list acts as a link between the <code>N</code> density function …\nEssentially this has only cosmetic importance since it has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse the configuration file Arguments:\nAtomic mass unit in grams 1 AMU = 1.66053904 × 10⁻²⁷ …\nAtomic mass unit (AMU) in kilograms 1 atomic mass unit = …\nConversion factor: Arcseconds to radians 1 arcsec = π / …\nAstronomical unit in centimeters 1 AU = 1.495978707 × …\nAstronomical unit (AU) in meters 1 AU = 1.495978707 × …\nBoltzmann constant in ergs per kelvin 1 erg/K = 1.38064852 …\nBoltzmann constant in joules per kelvin 1.38064852 × …\nA small number to avoid division by zero Used to prevent …\nGravitational constant in cubic centimeters per gram per …\nGravitational constant in cubic meters per kilogram per …\nConstant: 100.0 * HPLANCK * CLIGHT / KBOLTZ Value: …\nConstant: HPLANCK * CLIGHT / (4.0 * PI * SPI) Value: …\nLength of the Julian year in seconds 365.25 days * 24 …\nLocal mean Cosmic Microwave Background (CMB) temperature …\nParsecs in meters 1 parsec ≈ 3.08567758 × 10¹⁶ m\nPlanck constant in erg seconds 1 erg = 1 × 10⁻⁷ joules\nPlanck constant in joule seconds 6.626070040 × 10⁻³⁴ …\nSolar mass in grams 1 Solar mass = 1.9891 × 10³⁰ kg = …\nSolar mass in kilograms 1 Solar mass = 1.9891 × 10³⁰ kg\nSolar radius in centimeters 1 Solar radius = 6.957 × …\nSolar radius in meters 1 Solar radius = 6.957 × 10⁸ m\nSpeed of light in vacuum in centimeters per second 1 c = …\nSpeed of light in vacuum in meters per second 2.99792458 …\nStefan-Boltzmann constant in erg per square centimeter per …\nStefan-Boltzmann constant in watts per square meter per …\nTypical Interstellar Medium (ISM) density in particles per …\nWhich “stages” of data are present in a grid.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe principal purpose of this function is to perform a …\nCalculate the distance between grid points The distance …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is designed to be a generic function to read the grid …\nThe algorithm works its way up the list of points with one …\nWrite the grid points to a VTK file The VTK file is …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a closure representing the Lynden-Bell &amp; Pringle …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new PythonModel by loading a Python file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis struct is meant to record all relevant information …\nNOTE: it is assumed that <code>vertex[i]</code> is opposite the face …\nEach of the faces of a polytope in N spatial dimensions is …\nApproximates the average line-shape function along a path …\nThe bulk velocity of the model material can vary …\nThe bulk velocity of the model material can vary …\n<code>coll_par</code> is a measure of how close to any edge of the face …\n<code>dist</code> is defined via <code>r_int = r + dist*dir</code>.\nPerforms linear interpolation over a simplex (triangle) …\nGiven a simplex dc and the face index (in the range {0……\nThe index (in the range {0…N}) of the face (and thus of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinds the index of the old cell in the face list of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the distance to the next Voronoi face in a given …\nConstructor for <code>FaceBasis</code>, initializes vectors dynamically …\n<code>&gt; 0</code> means the ray exits, <code>&lt; 0</code> means it enters, <code>== 0</code> means …\n<code>r</code> is a list of the the <code>N</code> vertices of the face, each of …\n<code>r</code> expresses the location of the N vertices of a simplicial …\n<code>simplex_centres</code> is a convenience pointer array which gives …\nEvaluates the light intensity along a line of sight for a …\nFor a given image pixel position, this function evaluates …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function rotates the B-field vector from the model …\nFields of this struct are constant but are set at runtime.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuasi-random number generator\nRandom number generator - should be the value returned by …\nAuxiliary functions\nThe source function <code>S</code> is defined as <code>j_nu/alpha</code>, which is …\nProvides the error and related functions\nThis function:\nA simple quasi-random number generator based on the Halton …\nevaluates a polynomial at <code>z</code> where <code>coeff</code> are the …\nPolynomial coefficients for a denominator of <code>erf_impl</code> in …\nPolynomial coefficients for a numerator of <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator in <code>erf_impl</code> in …\nPolynomial coefficients for a numerator in <code>erf_impl</code> in the …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\nPolynomial coefficients for a denominator of <code>erf_inv_impl</code> …\nPolynomial coefficients for a numerator of <code>erf_inv_impl</code> in …\n<code>erf</code> calculates the error function at <code>x</code>.\n<code>erf_impl</code> computes the error function at <code>z</code>. If <code>inv</code> is true, …\n<code>erf_inv</code> calculates the inverse error function at <code>x</code>.\n<code>erfc</code> calculates the complementary error function at <code>x</code>.\n<code>erfc_inv</code> calculates the complementary inverse error …\nInput arrays have different lengths\nNot enough points provided for interpolation\nNumerical instability detected during calculation\nInterpolation requested outside range of input data\nPoints in the input data are too close together\nInput x values must be in strictly ascending order\nCreate a new cubic spline from slices (for easier interop …\nEvaluate the spline with extrapolation outside bounds This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterpolate at the given x value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new cubic spline interpolator\nHalton State\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")