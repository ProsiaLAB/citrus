use crate::NUM_OF_GRID_STAGES;

#[derive(Default, Debug)]
pub struct ConfigInfo {
    pub radius: f64,
    pub min_scale: f64,
    pub cmb_temp: f64,
    pub sink_points: i32,
    pub p_intensity: i32,
    pub blend: i32,
    pub ray_trace_algorithm: i32,
    pub sampling_algorithm: i32,
    pub sampling: i32,
    pub lte_only: i32,
    pub init_lte: i32,
    pub anti_alias: i32,
    pub polarization: i32,
    pub nthreads: i32,
    pub nsolve_iters: i32,
    pub collisional_partner_user_set_flags: i32,
    pub output_file: String,
    pub binoutput_file: String,
    pub grid_file: String,
    pub pre_grid: String,
    pub restart: bool,
    pub dust: String,
    pub grid_in_file: String,
    pub reset_rng: bool,
    pub do_solve_rte: bool,
    pub radius_squ: f64,
    pub min_scale_squ: f64,
    pub taylor_cutoff: f64,
    pub grid_density_global_max: f64,
    pub ncell: i32,
    pub n_images: i32,
    pub n_species: i32,
    pub num_densities: i32,
    pub do_pregrid: bool,
    pub num_grid_density_maxima: i32,
    pub num_dims: i32,
    pub n_line_images: i32,
    pub n_cont_images: i32,
    pub data_flags: i32,
    pub n_solve_iters_done: i32,
    pub do_interpolate_vels: bool,
    pub use_abun: bool,
    pub do_mol_calcs: bool,
    pub use_vel_func_in_raytrace: bool,
    pub edge_vels_available: bool,
    pub nmol_weights: Vec<f64>,
    pub grid_density_max_locations: Vec<[f64; 3]>,
    pub grid_density_max_values: Vec<f64>,
    pub collisional_partner_mol_weights: Vec<f64>,
    pub collisional_partner_ids: Vec<i64>,
    pub grid_data_file: Vec<f64>,
    pub mol_data_file: Vec<String>,
    pub collisional_partner_names: Vec<String>,
    pub grid_out_files: Vec<String>,
    pub write_grid_at_stage: [f64; NUM_OF_GRID_STAGES],
}
